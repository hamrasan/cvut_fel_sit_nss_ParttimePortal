{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asher\\\\Desktop\\\\\\u0160kola\\\\4 Sem\\\\RSP\\\\Dev\\\\rsproject\\\\FrontEnd\\\\travel-and-work-app\\\\src\\\\Components\\\\Admin\\\\Category\\\\Edit.js\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Col, Button, Spinner } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport ButtonInRow from \"../../SmartGadgets/ButtonInRow\";\nimport rules from \"../../../Files/validationRules.json\";\nimport { formValidation, validationFeedback, validationClassName } from \"../../../Validator\";\n\nclass Edit extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      category: null,\n      form: {\n        isValid: false,\n        elements: {\n          name: {\n            touched: false,\n            valid: false,\n            validationRules: rules.category.name\n          }\n        }\n      }\n    };\n\n    this.submitHandler = async event => {\n      event.preventDefault();\n      console.log(this.state.category);\n      await this.validateForm();\n\n      if (this.state.form.isValid) {\n        fetch(\"http://localhost:8080/category/\" + this.props.match.params.id, {\n          method: \"PATCH\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(this.state.category)\n        }).then(response => {\n          if (response.ok) this.props.history.push(\"/category\"); //TODO - osetrenie vynimiek\n          else console.log(\"Error: somethhing goes wrong\");\n        });\n      }\n    };\n\n    this.inputUpdateHandler = async (event, nameOfFormInput, number = false) => {\n      const newState = { ...this.state.category\n      };\n      let input = event.target.value;\n\n      if (number) {\n        input = event.target.value.replace(/,/g, \".\");\n      }\n\n      newState[nameOfFormInput] = input;\n      await this.setState({\n        category: newState\n      });\n\n      if (this.state.form.elements[nameOfFormInput].touched) {\n        this.validateForm();\n      }\n    };\n\n    this.validateForm = async () => {\n      const newState = { ...this.state.form\n      };\n      formValidation(newState, this.state.category);\n      await this.setState({\n        form: newState\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`http://localhost:8080/category/` + this.props.match.params.id);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      category: data\n    });\n  }\n\n  render() {\n    if (this.state.category === null) {\n      return /*#__PURE__*/React.createElement(Container, {\n        className: \"mt-5 p-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      }, \"Loading...\")));\n    } else {\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ButtonInRow, {\n        variant: \"danger\",\n        link: \"/category\",\n        side: \"left\",\n        label: \"\",\n        back: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Form, {\n        className: \"mt-3 mb-5\",\n        onSubmit: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }\n      }, \"Edit category\"), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }\n      }, \"Name of category\"), /*#__PURE__*/React.createElement(Form.Control, {\n        className: validationClassName(\"name\", this.state.form),\n        placeholder: \"Enter name\",\n        value: this.state.category.name,\n        onChange: event => this.inputUpdateHandler(event, \"name\", true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }\n      }, validationFeedback(\"name\", this.state.form))), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    }\n  }\n\n}\n\nexport default Edit;","map":{"version":3,"sources":["C:/Users/asher/Desktop/Å kola/4 Sem/RSP/Dev/rsproject/FrontEnd/travel-and-work-app/src/Components/Admin/Category/Edit.js"],"names":["React","Form","Col","Button","Spinner","Container","ButtonInRow","rules","formValidation","validationFeedback","validationClassName","Edit","Component","state","category","form","isValid","elements","name","touched","valid","validationRules","submitHandler","event","preventDefault","console","log","validateForm","fetch","props","match","params","id","method","mode","headers","body","JSON","stringify","then","response","ok","history","push","inputUpdateHandler","nameOfFormInput","number","newState","input","target","value","replace","setState","componentDidMount","data","json","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col, Button, Spinner } from \"react-bootstrap\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport ButtonInRow from \"../../SmartGadgets/ButtonInRow\";\r\nimport rules from \"../../../Files/validationRules.json\";\r\nimport {\r\n    formValidation,\r\n    validationFeedback,\r\n    validationClassName,\r\n} from \"../../../Validator\";\r\n\r\nclass Edit extends React.Component {\r\n    state = {\r\n        category: null,\r\n        form: {\r\n            isValid: false,\r\n            elements: {\r\n                name: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.category.name,\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch(\r\n            `http://localhost:8080/category/` + this.props.match.params.id\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        this.setState({ category: data });\r\n    }\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        console.log(this.state.category);\r\n        await this.validateForm();\r\n        if (this.state.form.isValid) {\r\n            fetch(\r\n                \"http://localhost:8080/category/\" + this.props.match.params.id,\r\n                {\r\n                    method: \"PATCH\",\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(this.state.category),\r\n                }\r\n            ).then((response) => {\r\n                if (response.ok) this.props.history.push(\"/category\");\r\n                //TODO - osetrenie vynimiek\r\n                else console.log(\"Error: somethhing goes wrong\");\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update state from input.\r\n     * @param {event} event\r\n     * @param {String} nameOfFormInput,\r\n     */\r\n    inputUpdateHandler = async (event, nameOfFormInput, number = false) => {\r\n        const newState = { ...this.state.category };\r\n        let input = event.target.value;\r\n        if (number) {\r\n            input = event.target.value.replace(/,/g, \".\");\r\n        }\r\n        newState[nameOfFormInput] = input;\r\n        await this.setState({ category: newState });\r\n        if (this.state.form.elements[nameOfFormInput].touched) {\r\n            this.validateForm();\r\n        }\r\n    };\r\n\r\n    validateForm = async () => {\r\n        const newState = { ...this.state.form };\r\n        formValidation(newState, this.state.category);\r\n        await this.setState({ form: newState });\r\n    };\r\n\r\n    render() {\r\n        if (this.state.category === null) {\r\n            return (\r\n                <Container className=\"mt-5 p-5\">\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </Container>\r\n            );\r\n        } else {\r\n            return (\r\n                <Container>\r\n                    <ButtonInRow\r\n                        variant=\"danger\"\r\n                        link=\"/category\"\r\n                        side=\"left\"\r\n                        label=\"\"\r\n                        back={true}\r\n                    />\r\n\r\n                    <Form className=\"mt-3 mb-5\" onSubmit={this.submitHandler}>\r\n                        <h1>Edit category</h1>\r\n\r\n                        <Form.Group as={Col} controlId=\"formGridName\">\r\n                            <Form.Label>Name of category</Form.Label>\r\n                            <Form.Control\r\n                                className={validationClassName(\r\n                                    \"name\",\r\n                                    this.state.form\r\n                                )}\r\n                                placeholder=\"Enter name\"\r\n                                value={this.state.category.name}\r\n                                onChange={(event) =>\r\n                                    this.inputUpdateHandler(event, \"name\", true)\r\n                                }\r\n                            />\r\n                            <div class=\"invalid-feedback\">\r\n                                {validationFeedback(\"name\", this.state.form)}\r\n                            </div>\r\n                        </Form.Group>\r\n\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Edit;\r\n"]},"metadata":{},"sourceType":"module"}