{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asher\\\\Desktop\\\\\\u0160kola\\\\4 Sem\\\\RSP\\\\Dev\\\\rsproject\\\\FrontEnd\\\\travel-and-work-app\\\\src\\\\Components\\\\Admin\\\\Achievement\\\\Create.js\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Col, Button, Row } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport icons from \"../../../Files/icons.json\";\nimport ButtonInRow from \"../../SmartGadgets/ButtonInRow\";\nimport rules from \"../../../Files/validationRules.json\";\nimport { formValidation, validationFeedback, validationClassName } from \"../../../Validator\";\n\nclass Create extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      achievement: {\n        name: null,\n        description: null,\n        icon: null\n      },\n      form: {\n        isValid: false,\n        elements: {\n          icon: {\n            idForUpdate: true,\n            touched: false,\n            valid: false,\n            validationRules: rules.achievement.icon\n          },\n          name: {\n            touched: false,\n            valid: false,\n            validationRules: rules.achievement.name\n          },\n          description: {\n            touched: false,\n            valid: false,\n            validationRules: rules.achievement.description\n          }\n        }\n      }\n    };\n\n    this.inputUpdateHandler = async (event, nameOfFormInput) => {\n      const newState = { ...this.state.achievement\n      };\n      if (this.state.form.elements[nameOfFormInput].idForUpdate) newState[nameOfFormInput] = event.target.id;else newState[nameOfFormInput] = event.target.value;\n      await this.setState({\n        achievement: newState\n      });\n\n      if (this.state.form.elements[nameOfFormInput].touched) {\n        this.validateForm();\n      }\n\n      console.log(this.state.achievement);\n    };\n\n    this.submitHandler = async event => {\n      event.preventDefault();\n      console.log(this.state.achievement);\n      await this.validateForm();\n\n      if (this.state.form.isValid) {\n        fetch(\"http://localhost:8080/achievement\", {\n          method: \"POST\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(this.state.achievement)\n        }).then(response => {\n          if (response.ok) this.props.history.push(\"/achievement\"); //TODO - osetrenie vynimiek\n          else console.log(\"Error: somethhing goes wrong\");\n        });\n      }\n    };\n\n    this.validateForm = async () => {\n      const newState = { ...this.state.form\n      };\n      formValidation(newState, this.state.achievement);\n      await this.setState({\n        form: newState\n      });\n    };\n  }\n\n  render() {\n    let iconsToForm = [];\n    icons.icons.forEach(element => {\n      iconsToForm.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"m-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Check.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form.Check, {\n        type: \"radio\",\n        name: \"formHorizontalRadios\",\n        id: element.icon,\n        onChange: event => this.inputUpdateHandler(event, \"icon\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        className: this.state.achievement.icon == element.icon ? \"choosen-icon\" : \"\",\n        icon: element.icon,\n        size: \"3x\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }\n      }))));\n    });\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ButtonInRow, {\n      variant: \"danger\",\n      link: \"/achievement\",\n      side: \"left\",\n      label: \"\",\n      back: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      className: \"mt-3 mb-5\",\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, \"Create achievement\"), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, \"Name of trip\"), /*#__PURE__*/React.createElement(Form.Control, {\n      className: validationClassName(\"name\", this.state.form),\n      placeholder: \"Enter name\",\n      onChange: event => this.inputUpdateHandler(event, \"name\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, validationFeedback(\"name\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"exampleForm.ControlTextarea1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n      as: \"textarea\",\n      rows: \"5\",\n      className: validationClassName(\"description\", this.state.form),\n      onChange: event => this.inputUpdateHandler(event, \"description\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }, validationFeedback(\"description\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n      className: \"d-flex flex-row flex-wrap \" + validationClassName(\"icon\", this.state.form),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, iconsToForm), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, validationFeedback(\"icon\", this.state.form)), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, \"Submit\")));\n  }\n\n}\n\nexport default Create;","map":{"version":3,"sources":["C:/Users/asher/Desktop/Å kola/4 Sem/RSP/Dev/rsproject/FrontEnd/travel-and-work-app/src/Components/Admin/Achievement/Create.js"],"names":["React","Form","Col","Button","Row","Container","FontAwesomeIcon","icons","ButtonInRow","rules","formValidation","validationFeedback","validationClassName","Create","Component","state","achievement","name","description","icon","form","isValid","elements","idForUpdate","touched","valid","validationRules","inputUpdateHandler","event","nameOfFormInput","newState","target","id","value","setState","validateForm","console","log","submitHandler","preventDefault","fetch","method","mode","headers","body","JSON","stringify","then","response","ok","props","history","push","render","iconsToForm","forEach","element"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col, Button, Row } from \"react-bootstrap\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport icons from \"../../../Files/icons.json\";\r\nimport ButtonInRow from \"../../SmartGadgets/ButtonInRow\";\r\nimport rules from \"../../../Files/validationRules.json\";\r\nimport {\r\n    formValidation,\r\n    validationFeedback,\r\n    validationClassName,\r\n} from \"../../../Validator\";\r\n\r\nclass Create extends React.Component {\r\n    state = {\r\n        achievement: { name: null, description: null, icon: null },\r\n        form: {\r\n            isValid: false,\r\n            elements: {\r\n                icon: {\r\n                    idForUpdate: true,\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.achievement.icon,\r\n                },\r\n                name: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.achievement.name,\r\n                },\r\n                description: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.achievement.description,\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    /**\r\n     * Update state from input.\r\n     * @param {event} event\r\n     * @param {String} nameOfFormInput,\r\n     */\r\n    inputUpdateHandler = async (event, nameOfFormInput) => {\r\n        const newState = { ...this.state.achievement };\r\n        if (this.state.form.elements[nameOfFormInput].idForUpdate)\r\n            newState[nameOfFormInput] = event.target.id;\r\n        else newState[nameOfFormInput] = event.target.value;\r\n        await this.setState({ achievement: newState });\r\n        if (this.state.form.elements[nameOfFormInput].touched) {\r\n            this.validateForm();\r\n        }\r\n        console.log(this.state.achievement);\r\n    };\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        console.log(this.state.achievement);\r\n        await this.validateForm();\r\n        if (this.state.form.isValid) {\r\n            fetch(\"http://localhost:8080/achievement\", {\r\n                method: \"POST\",\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(this.state.achievement),\r\n            }).then((response) => {\r\n                if (response.ok) this.props.history.push(\"/achievement\");\r\n                //TODO - osetrenie vynimiek\r\n                else console.log(\"Error: somethhing goes wrong\");\r\n            });\r\n        }\r\n    };\r\n\r\n    validateForm = async () => {\r\n        const newState = { ...this.state.form };\r\n        formValidation(newState, this.state.achievement);\r\n        await this.setState({ form: newState });\r\n    };\r\n\r\n    render() {\r\n        let iconsToForm = [];\r\n        icons.icons.forEach((element) => {\r\n            iconsToForm.push(\r\n                <div className=\"m-5\">\r\n                    <Form.Check.Label>\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            name=\"formHorizontalRadios\"\r\n                            id={element.icon}\r\n                            onChange={(event) =>\r\n                                this.inputUpdateHandler(event, \"icon\")\r\n                            }\r\n                        />\r\n                        <FontAwesomeIcon\r\n                            className={\r\n                                this.state.achievement.icon == element.icon\r\n                                    ? \"choosen-icon\"\r\n                                    : \"\"\r\n                            }\r\n                            icon={element.icon}\r\n                            size=\"3x\"\r\n                        />\r\n                    </Form.Check.Label>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Container>\r\n                <ButtonInRow\r\n                    variant=\"danger\"\r\n                    link=\"/achievement\"\r\n                    side=\"left\"\r\n                    label=\"\"\r\n                    back={true}\r\n                />\r\n\r\n                <Form className=\"mt-3 mb-5\" onSubmit={this.submitHandler}>\r\n                    <h1>Create achievement</h1>\r\n\r\n                    <Form.Group as={Col} controlId=\"formGridName\">\r\n                        <Form.Label>Name of trip</Form.Label>\r\n                        <Form.Control\r\n                            className={validationClassName(\r\n                                \"name\",\r\n                                this.state.form\r\n                            )}\r\n                            placeholder=\"Enter name\"\r\n                            onChange={(event) =>\r\n                                this.inputUpdateHandler(event, \"name\")\r\n                            }\r\n                        />\r\n                        <div class=\"invalid-feedback\">\r\n                            {validationFeedback(\"name\", this.state.form)}\r\n                        </div>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                        <Form.Label>Description</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"5\"\r\n                            className={validationClassName(\r\n                                \"description\",\r\n                                this.state.form\r\n                            )}\r\n                            onChange={(event) =>\r\n                                this.inputUpdateHandler(event, \"description\")\r\n                            }\r\n                        />\r\n                        <div class=\"invalid-feedback\">\r\n                            {validationFeedback(\"description\", this.state.form)}\r\n                        </div>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group\r\n                        className={\r\n                            \"d-flex flex-row flex-wrap \" +\r\n                            validationClassName(\"icon\", this.state.form)\r\n                        }\r\n                    >\r\n                        {iconsToForm}\r\n                    </Form.Group>\r\n                    <div class=\"invalid-feedback\">\r\n                        {validationFeedback(\"icon\", this.state.form)}\r\n                    </div>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Create;\r\n"]},"metadata":{},"sourceType":"module"}