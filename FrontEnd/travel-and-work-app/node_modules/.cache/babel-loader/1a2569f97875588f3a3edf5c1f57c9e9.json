{"ast":null,"code":"import React from \"react\";\n/**\r\n *\r\n * @param {Object} formStateObject -\r\n *         form: {\r\n *           isValid: false,\r\n *           elements: {\r\n *               name: {\r\n *                   touched: false,\r\n *                   valid: false,\r\n *                   validationRules: rules\r\n *               },\r\n * @param {Object} inputsObject - you can acces to input with inputsObject[propName]\r\n */\n\nexport const formValidation = (formStateObject, inputsObject) => {\n  console.log(\"in validation\");\n\n  for (let inputName in formStateObject.elements) {\n    const input = inputsObject[inputName];\n\n    if (formStateObject.hasOwnProperty(\"elements\") && formStateObject.elements.hasOwnProperty(inputName)) {\n      if (formStateObject.elements[inputName].hasOwnProperty(\"validationRules\") && formStateObject.elements[inputName].validationRules) {\n        const rules = formStateObject.elements[inputName].validationRules;\n        formStateObject.elements[inputName].touched = true;\n        formStateObject.elements[inputName].valid = true;\n        formStateObject.valid = true;\n        console.log(\"I am validating..\");\n        console.log(inputName);\n\n        if (rules.hasOwnProperty(\"required\") && rules.required) {\n          if (!input || isNaN(input) && input.trim() == \"\" || input.length < 1) {\n            formStateObject.elements[inputName].valid = false;\n            formStateObject.valid = false;\n            console.log(\"required check: INVALID\");\n          } else {\n            console.log(\"required check:  valid\");\n          }\n        }\n\n        if (rules.hasOwnProperty(\"minLength\")) {\n          if (!input || input.trim().length < rules.minLength) {\n            formStateObject.elements[inputName].valid = false;\n            formStateObject.valid = false;\n            console.log(\"min length (\" + rules.minLength + \") check: INVALID\");\n          } else {\n            console.log(\"min length (\" + rules.minLength + \") check: valid\");\n          }\n        }\n\n        if (rules.hasOwnProperty(\"maxLength\")) {\n          if (!input || input.trim().length > rules.maxLength) {\n            formStateObject.elements[inputName].valid = false;\n            formStateObject.valid = false;\n            console.log(\"max length (\" + rules.maxLength + \") check: INVALID\");\n          } else {\n            console.log(\"max length (\" + rules.maxLength + \") check: valid\");\n          }\n        }\n\n        if (rules.hasOwnProperty(\"number\") && rules.number) {\n          let parsed = parseFloat(input);\n\n          if (isNaN(parsed)) {\n            formStateObject.elements[inputName].valid = false;\n            formStateObject.valid = false;\n            console.log(\"is number check: INVALID\");\n          } else {\n            console.log(\"is number check: valid\");\n          }\n        }\n\n        if (rules.hasOwnProperty(\"number\") && rules.number) {\n          let parsed = parseFloat(input);\n\n          if (isNaN(parsed)) {\n            formStateObject.elements[inputName].valid = false;\n            formStateObject.valid = false;\n            console.log(\"is number check: INVALID\");\n          } else {\n            console.log(\"is number check: valid\"); //minValue and maxValue is available only at numbers\n\n            if (rules.hasOwnProperty(\"minValue\")) {\n              if (parsed < rules.minValue) {\n                formStateObject.elements[inputName].valid = false;\n                formStateObject.valid = false;\n                console.log(\"min \" + rules.minValue + \" value check: INVALID\");\n              } else {\n                console.log(\"min \" + rules.minValue + \" value check: valid\");\n              }\n\n              if (parsed > rules.maxValue) {\n                formStateObject.elements[inputName].valid = false;\n                formStateObject.valid = false;\n                console.log(\"max \" + rules.maxValue + \" value check: INVALID\");\n              } else {\n                console.log(\"max \" + rules.maxValue + \" value check: valid\");\n              }\n            }\n          }\n        }\n\n        if (rules.hasOwnProperty(\"email\") && rules.email) {\n          if (!input.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\n            formStateObject.elements[inputName].valid = false;\n            formStateObject.valid = false;\n            console.log(\"email check: INVALID\");\n          } else {\n            console.log(\"email check: valid\");\n          }\n        }\n\n        formStateObject.isValid = formStateObject.elements[inputName].valid;\n      }\n    }\n  }\n};\n/**\r\n * Return class name for form input after validation(touched is true).\r\n */\n\nexport const validationClassName = (inputName, formStateObject) => {\n  const elements = formStateObject.elements;\n\n  if (elements[inputName].touched) {\n    if (elements[inputName].valid) return \"is-valid\";\n    return \"is-invalid\";\n  } else {\n    return \"\";\n  }\n};\n/**\r\n * Set text of validation feedback by rules of input.\r\n */\n\nexport const validationFeedback = (inputName, formStateObject) => {\n  if (formStateObject.elements.hasOwnProperty(inputName)) {\n    const element = formStateObject.elements[inputName];\n\n    if (element && element.validationRules) {\n      const rules = element.validationRules;\n      let text = \"\";\n\n      if (rules.hasOwnProperty(\"required\") && rules.required) {\n        text += capitalizeFirstLetter(inputName) + \" is required. \";\n      }\n\n      if (rules.hasOwnProperty(\"minLength\")) {\n        if (text.length > 0) {\n          text += \"Minimal length is \" + rules.minLength + \". \";\n        } else {\n          text += \"Minimal length of \" + capitalizeFirstLetter(inputName) + \" is \" + rules.minLength + \". \";\n        }\n      }\n\n      if (rules.hasOwnProperty(\"maxLength\")) {\n        if (text.length > 0) {\n          text += \"Maximal length is \" + rules.maxLength + \". \";\n        } else {\n          text += \"Maximal length of \" + capitalizeFirstLetter(inputName) + \" is \" + rules.maxLength + \". \";\n        }\n      }\n\n      if (rules.hasOwnProperty(\"number\") && rules.number) {\n        if (text.length > 0) {\n          text += \"Needs to be number. \";\n        } else {\n          text += capitalizeFirstLetter(inputName) + \" needs to be number. \";\n        }\n\n        if (rules.number && rules.hasOwnProperty(\"minValue\")) {\n          if (text.length > 0) {\n            text += \"Minimal value is \" + rules.minValue + \". \";\n          } else {\n            text += capitalizeFirstLetter(inputName) + \" minimal value is \" + rules.minValue + \". \";\n          }\n        }\n\n        if (rules.number && rules.hasOwnProperty(\"maxValue\")) {\n          if (text.length > 0) {\n            text += \"Maximal value is \" + rules.maxValue + \". \";\n          } else {\n            text += capitalizeFirstLetter(inputName) + \" maximal value is \" + rules.maxValue + \". \";\n          }\n        }\n      }\n\n      return text;\n    }\n  }\n};\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}","map":{"version":3,"sources":["C:/Users/asher/Desktop/Å kola/4 Sem/RSP/Dev/rsproject/FrontEnd/travel-and-work-app/src/Validator.js"],"names":["React","formValidation","formStateObject","inputsObject","console","log","inputName","elements","input","hasOwnProperty","validationRules","rules","touched","valid","required","isNaN","trim","length","minLength","maxLength","number","parsed","parseFloat","minValue","maxValue","email","match","isValid","validationClassName","validationFeedback","element","text","capitalizeFirstLetter","string","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n *\r\n * @param {Object} formStateObject -\r\n *         form: {\r\n *           isValid: false,\r\n *           elements: {\r\n *               name: {\r\n *                   touched: false,\r\n *                   valid: false,\r\n *                   validationRules: rules\r\n *               },\r\n * @param {Object} inputsObject - you can acces to input with inputsObject[propName]\r\n */\r\nexport const formValidation = (formStateObject, inputsObject) => {\r\n    console.log(\"in validation\");\r\n    for (let inputName in formStateObject.elements) {\r\n        const input = inputsObject[inputName];\r\n        if (\r\n            formStateObject.hasOwnProperty(\"elements\") &&\r\n            formStateObject.elements.hasOwnProperty(inputName)\r\n        ) {\r\n            if (\r\n                formStateObject.elements[inputName].hasOwnProperty(\r\n                    \"validationRules\"\r\n                ) &&\r\n                formStateObject.elements[inputName].validationRules\r\n            ) {\r\n                const rules =\r\n                    formStateObject.elements[inputName].validationRules;\r\n                formStateObject.elements[inputName].touched = true;\r\n                formStateObject.elements[inputName].valid = true;\r\n                formStateObject.valid = true;\r\n                console.log(\"I am validating..\");\r\n                console.log(inputName);\r\n                if (rules.hasOwnProperty(\"required\") && rules.required) {\r\n                    if (\r\n                        !input ||\r\n                        (isNaN(input) && input.trim() == \"\") ||\r\n                        input.length < 1\r\n                    ) {\r\n                        formStateObject.elements[inputName].valid = false;\r\n                        formStateObject.valid = false;\r\n                        console.log(\"required check: INVALID\");\r\n                    } else {\r\n                        console.log(\"required check:  valid\");\r\n                    }\r\n                }\r\n                if (rules.hasOwnProperty(\"minLength\")) {\r\n                    if (!input || input.trim().length < rules.minLength) {\r\n                        formStateObject.elements[inputName].valid = false;\r\n                        formStateObject.valid = false;\r\n                        console.log(\r\n                            \"min length (\" +\r\n                                rules.minLength +\r\n                                \") check: INVALID\"\r\n                        );\r\n                    } else {\r\n                        console.log(\r\n                            \"min length (\" + rules.minLength + \") check: valid\"\r\n                        );\r\n                    }\r\n                }\r\n                if (rules.hasOwnProperty(\"maxLength\")) {\r\n                    if (!input || input.trim().length > rules.maxLength) {\r\n                        formStateObject.elements[inputName].valid = false;\r\n                        formStateObject.valid = false;\r\n                        console.log(\r\n                            \"max length (\" +\r\n                                rules.maxLength +\r\n                                \") check: INVALID\"\r\n                        );\r\n                    } else {\r\n                        console.log(\r\n                            \"max length (\" + rules.maxLength + \") check: valid\"\r\n                        );\r\n                    }\r\n                }\r\n                if (rules.hasOwnProperty(\"number\") && rules.number) {\r\n                    let parsed = parseFloat(input);\r\n                    if (isNaN(parsed)) {\r\n                        formStateObject.elements[inputName].valid = false;\r\n                        formStateObject.valid = false;\r\n                        console.log(\"is number check: INVALID\");\r\n                    } else {\r\n                        console.log(\"is number check: valid\");\r\n                    }\r\n                }\r\n                if (rules.hasOwnProperty(\"number\") && rules.number) {\r\n                    let parsed = parseFloat(input);\r\n                    if (isNaN(parsed)) {\r\n                        formStateObject.elements[inputName].valid = false;\r\n                        formStateObject.valid = false;\r\n                        console.log(\"is number check: INVALID\");\r\n                    } else {\r\n                        console.log(\"is number check: valid\");\r\n                        //minValue and maxValue is available only at numbers\r\n                        if (rules.hasOwnProperty(\"minValue\")) {\r\n                            if (parsed < rules.minValue) {\r\n                                formStateObject.elements[\r\n                                    inputName\r\n                                ].valid = false;\r\n                                formStateObject.valid = false;\r\n                                console.log(\r\n                                    \"min \" +\r\n                                        rules.minValue +\r\n                                        \" value check: INVALID\"\r\n                                );\r\n                            } else {\r\n                                console.log(\r\n                                    \"min \" +\r\n                                        rules.minValue +\r\n                                        \" value check: valid\"\r\n                                );\r\n                            }\r\n                            if (parsed > rules.maxValue) {\r\n                                formStateObject.elements[\r\n                                    inputName\r\n                                ].valid = false;\r\n                                formStateObject.valid = false;\r\n                                console.log(\r\n                                    \"max \" +\r\n                                        rules.maxValue +\r\n                                        \" value check: INVALID\"\r\n                                );\r\n                            } else {\r\n                                console.log(\r\n                                    \"max \" +\r\n                                        rules.maxValue +\r\n                                        \" value check: valid\"\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (rules.hasOwnProperty(\"email\") && rules.email) {\r\n                    if (!input.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\r\n                        formStateObject.elements[inputName].valid = false;\r\n                        formStateObject.valid = false;\r\n                        console.log(\"email check: INVALID\");\r\n                    } else {\r\n                        console.log(\"email check: valid\");\r\n                    }\r\n                }\r\n\r\n                formStateObject.isValid =\r\n                    formStateObject.elements[inputName].valid;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Return class name for form input after validation(touched is true).\r\n */\r\nexport const validationClassName = (inputName, formStateObject) => {\r\n    const elements = formStateObject.elements;\r\n    if (elements[inputName].touched) {\r\n        if (elements[inputName].valid) return \"is-valid\";\r\n        return \"is-invalid\";\r\n    } else {\r\n        return \"\";\r\n    }\r\n};\r\n\r\n/**\r\n * Set text of validation feedback by rules of input.\r\n */\r\nexport const validationFeedback = (inputName, formStateObject) => {\r\n    if (formStateObject.elements.hasOwnProperty(inputName)) {\r\n        const element = formStateObject.elements[inputName];\r\n        if (element && element.validationRules) {\r\n            const rules = element.validationRules;\r\n            let text = \"\";\r\n            if (rules.hasOwnProperty(\"required\") && rules.required) {\r\n                text += capitalizeFirstLetter(inputName) + \" is required. \";\r\n            }\r\n            if (rules.hasOwnProperty(\"minLength\")) {\r\n                if (text.length > 0) {\r\n                    text += \"Minimal length is \" + rules.minLength + \". \";\r\n                } else {\r\n                    text +=\r\n                        \"Minimal length of \" +\r\n                        capitalizeFirstLetter(inputName) +\r\n                        \" is \" +\r\n                        rules.minLength +\r\n                        \". \";\r\n                }\r\n            }\r\n            if (rules.hasOwnProperty(\"maxLength\")) {\r\n                if (text.length > 0) {\r\n                    text += \"Maximal length is \" + rules.maxLength + \". \";\r\n                } else {\r\n                    text +=\r\n                        \"Maximal length of \" +\r\n                        capitalizeFirstLetter(inputName) +\r\n                        \" is \" +\r\n                        rules.maxLength +\r\n                        \". \";\r\n                }\r\n            }\r\n\r\n            if (rules.hasOwnProperty(\"number\") && rules.number) {\r\n                if (text.length > 0) {\r\n                    text += \"Needs to be number. \";\r\n                } else {\r\n                    text +=\r\n                        capitalizeFirstLetter(inputName) +\r\n                        \" needs to be number. \";\r\n                }\r\n\r\n                if (rules.number && rules.hasOwnProperty(\"minValue\")) {\r\n                    if (text.length > 0) {\r\n                        text += \"Minimal value is \" + rules.minValue + \". \";\r\n                    } else {\r\n                        text +=\r\n                            capitalizeFirstLetter(inputName) +\r\n                            \" minimal value is \" +\r\n                            rules.minValue +\r\n                            \". \";\r\n                    }\r\n                }\r\n\r\n                if (rules.number && rules.hasOwnProperty(\"maxValue\")) {\r\n                    if (text.length > 0) {\r\n                        text += \"Maximal value is \" + rules.maxValue + \". \";\r\n                    } else {\r\n                        text +=\r\n                            capitalizeFirstLetter(inputName) +\r\n                            \" maximal value is \" +\r\n                            rules.maxValue +\r\n                            \". \";\r\n                    }\r\n                }\r\n            }\r\n\r\n            return text;\r\n        }\r\n    }\r\n};\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}