{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asher\\\\Desktop\\\\\\u0160kola\\\\4 Sem\\\\RSP\\\\Dev\\\\rsproject\\\\FrontEnd\\\\travel-and-work-app\\\\src\\\\Components\\\\Admin\\\\Achievement\\\\Edit.js\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Col, Button, Row } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { getElementError } from \"@testing-library/react\";\n\nclass Edit extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      trip: null,\n      achievements: null,\n      categories: null\n    };\n\n    this.achievementElementCompleted = (checkedInput, element) => {\n      let formInput = checkedInput ? /*#__PURE__*/React.createElement(Form.Check.Input, {\n        type: \"checkbox\",\n        checked: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }\n      }) : /*#__PURE__*/React.createElement(Form.Check.Input, {\n        type: \"checkbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      });\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Check.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }, formInput, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: element.icon,\n        size: \"lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }), element.name));\n    };\n  }\n\n  async componentDidMount() {\n    const response1 = await fetch(`http://localhost:8080/trip/` + this.props.match.params.id);\n    const data1 = await response1.json();\n    console.log(data1);\n    this.setState({\n      trip: data1\n    });\n    const response2 = await fetch(`http://localhost:8080/category`);\n    const data2 = await response2.json();\n    console.log(data2);\n    this.setState({\n      categories: data2\n    });\n    const response3 = await fetch(`http://localhost:8080/achievement`);\n    const data3 = await response3.json();\n    console.log(data3);\n    this.setState({\n      achievements: data3\n    });\n  }\n\n  render() {\n    if (this.state.categories === null || this.state.trip === null || this.state.achievements === null) {\n      return /*#__PURE__*/React.createElement(Container, {\n        className: \"p-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }\n      }, \"Loading...\")));\n    } else {\n      let possibleXPrewardOptions = [];\n\n      for (let i = 0; i < 25; i++) {\n        let option = i + 1 == this.state.trip.possible_xp_reward ? /*#__PURE__*/React.createElement(\"option\", {\n          selected: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }\n        }, i + 1) : /*#__PURE__*/React.createElement(\"option\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }\n        }, i + 1);\n        possibleXPrewardOptions.push(option);\n      }\n\n      let categoryOptions = null;\n\n      if (this.state.categories.length > 0) {\n        let categoriesArray = [];\n        this.state.categories.forEach(element => {\n          let option = /*#__PURE__*/React.createElement(\"option\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 34\n            }\n          }, element.name);\n\n          if (this.state.trip.category) {\n            if (this.state.trip.category.name == element.name) option = /*#__PURE__*/React.createElement(\"option\", {\n              selected: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 38\n              }\n            }, element.name);\n          }\n\n          categoriesArray.push(option);\n        });\n        categoryOptions = /*#__PURE__*/React.createElement(Form.Control, {\n          as: \"select\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }\n        }, \"Choose category..\"), categoriesArray);\n      }\n\n      let requiredAchievements = null;\n      let requiredAchievementsArray = [];\n      let gainAchievements = null;\n      let gainAchievementsArray = [];\n\n      if (this.state.achievements.length > 0) {\n        this.state.achievements.forEach(element => {\n          if (this.state.trip.required_achievements.some(item => item.name == element.name)) {\n            requiredAchievementsArray.push(this.achievementElementCompleted(true, element));\n          } else {\n            requiredAchievementsArray.push(this.achievementElementCompleted(false, element));\n          }\n        });\n        requiredAchievements = /*#__PURE__*/React.createElement(Form.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Form.Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }\n        }, \"Required achievements\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"d-flex flex-column align-items-start ml-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }\n        }, requiredAchievementsArray));\n        this.state.achievements.forEach(element => {\n          if (this.state.trip.gain_achievements.some(item => item.name == element.name)) {\n            gainAchievementsArray.push(this.achievementElementCompleted(true, element));\n          } else {\n            gainAchievementsArray.push(this.achievementElementCompleted(false, element));\n          }\n        });\n        gainAchievements = /*#__PURE__*/React.createElement(Form.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Form.Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }\n        }, \"Gain achievements\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"d-flex flex-column align-items-start ml-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }\n        }, gainAchievementsArray));\n      }\n\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        className: \"mt-3 mb-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }\n      }, \"Edit trip\"), /*#__PURE__*/React.createElement(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 33\n        }\n      }, \"Name of trip\"), /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.trip.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridShortName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 33\n        }\n      }, \"Identificatation name\"), /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.trip.short_name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridDeposit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 33\n        }\n      }, \"Deposit\"), /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.trip.deposit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridExperience\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 33\n        }\n      }, \"Required level\"), /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.trip.requiered_level,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"exampleForm.ControlSelect1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 33\n        }\n      }, \"Possible XP reward\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"select\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 33\n        }\n      }, possibleXPrewardOptions)), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"exampleForm.ControlSelect1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 33\n        }\n      }, \"Category\"), categoryOptions)), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"formGridLocation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 29\n        }\n      }, \"Location\"), /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.trip.location,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"exampleForm.ControlTextarea1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 29\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        rows: \"5\",\n        value: this.state.trip.description,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        className: \"pl-5\",\n        controlId: \"formGridName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }\n      }, requiredAchievements), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        className: \"pl-5\",\n        controlId: \"formGridName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }\n      }, gainAchievements)), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    }\n  }\n\n}\n\nexport default Edit;","map":{"version":3,"sources":["C:/Users/asher/Desktop/Škola/4 Sem/RSP/Dev/rsproject/FrontEnd/travel-and-work-app/src/Components/Admin/Achievement/Edit.js"],"names":["React","Form","Col","Button","Row","Container","FontAwesomeIcon","Spinner","getElementError","Edit","Component","state","trip","achievements","categories","achievementElementCompleted","checkedInput","element","formInput","icon","name","componentDidMount","response1","fetch","props","match","params","id","data1","json","console","log","setState","response2","data2","response3","data3","render","possibleXPrewardOptions","i","option","possible_xp_reward","push","categoryOptions","length","categoriesArray","forEach","category","requiredAchievements","requiredAchievementsArray","gainAchievements","gainAchievementsArray","required_achievements","some","item","gain_achievements","short_name","deposit","requiered_level","location","description"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col, Button, Row } from \"react-bootstrap\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { getElementError } from \"@testing-library/react\";\r\n\r\nclass Edit extends React.Component {\r\n    state = { trip: null, achievements: null, categories: null };\r\n\r\n    async componentDidMount() {\r\n        const response1 = await fetch(\r\n            `http://localhost:8080/trip/` + this.props.match.params.id\r\n        );\r\n        const data1 = await response1.json();\r\n        console.log(data1);\r\n        this.setState({ trip: data1 });\r\n\r\n        const response2 = await fetch(`http://localhost:8080/category`);\r\n        const data2 = await response2.json();\r\n        console.log(data2);\r\n        this.setState({\r\n            categories: data2\r\n        });\r\n\r\n        const response3 = await fetch(`http://localhost:8080/achievement`);\r\n        const data3 = await response3.json();\r\n        console.log(data3);\r\n        this.setState({ achievements: data3 });\r\n    }\r\n\r\n    achievementElementCompleted = (checkedInput, element) => {\r\n        let formInput = checkedInput ? (\r\n            <Form.Check.Input type=\"checkbox\" checked />\r\n        ) : (\r\n            <Form.Check.Input type=\"checkbox\" />\r\n        );\r\n        return (\r\n            <>\r\n                <Form.Check.Label>\r\n                    {formInput}\r\n                    <FontAwesomeIcon icon={element.icon} size=\"lg\" />\r\n                    {element.name}\r\n                </Form.Check.Label>\r\n            </>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        if (\r\n            this.state.categories === null ||\r\n            this.state.trip === null ||\r\n            this.state.achievements === null\r\n        ) {\r\n            return (\r\n                <Container className=\"p-5\">\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </Container>\r\n            );\r\n        } else {\r\n            let possibleXPrewardOptions = [];\r\n            for (let i = 0; i < 25; i++) {\r\n                let option =\r\n                    i + 1 == this.state.trip.possible_xp_reward ? (\r\n                        <option selected>{i + 1}</option>\r\n                    ) : (\r\n                        <option>{i + 1}</option>\r\n                    );\r\n                possibleXPrewardOptions.push(option);\r\n            }\r\n\r\n            let categoryOptions = null;\r\n\r\n            if (this.state.categories.length > 0) {\r\n                let categoriesArray = [];\r\n\r\n                this.state.categories.forEach(element => {\r\n                    let option = <option>{element.name}</option>;\r\n                    if (this.state.trip.category) {\r\n                        if (this.state.trip.category.name == element.name)\r\n                            option = <option selected>{element.name}</option>;\r\n                    }\r\n                    categoriesArray.push(option);\r\n                });\r\n                categoryOptions = (\r\n                    <Form.Control as=\"select\">\r\n                        <option>Choose category..</option>\r\n                        {categoriesArray}\r\n                    </Form.Control>\r\n                );\r\n            }\r\n\r\n            let requiredAchievements = null;\r\n            let requiredAchievementsArray = [];\r\n            let gainAchievements = null;\r\n            let gainAchievementsArray = [];\r\n\r\n            if (this.state.achievements.length > 0) {\r\n                this.state.achievements.forEach(element => {\r\n                    if (\r\n                        this.state.trip.required_achievements.some(\r\n                            item => item.name == element.name\r\n                        )\r\n                    ) {\r\n                        requiredAchievementsArray.push(\r\n                            this.achievementElementCompleted(true, element)\r\n                        );\r\n                    } else {\r\n                        requiredAchievementsArray.push(\r\n                            this.achievementElementCompleted(false, element)\r\n                        );\r\n                    }\r\n                });\r\n                requiredAchievements = (\r\n                    <Form.Group>\r\n                        <Form.Label>Required achievements</Form.Label>\r\n                        <div className=\"d-flex flex-column align-items-start ml-5\">\r\n                            {requiredAchievementsArray}\r\n                        </div>\r\n                    </Form.Group>\r\n                );\r\n\r\n                this.state.achievements.forEach(element => {\r\n                    if (\r\n                        this.state.trip.gain_achievements.some(\r\n                            item => item.name == element.name\r\n                        )\r\n                    ) {\r\n                        gainAchievementsArray.push(\r\n                            this.achievementElementCompleted(true, element)\r\n                        );\r\n                    } else {\r\n                        gainAchievementsArray.push(\r\n                            this.achievementElementCompleted(false, element)\r\n                        );\r\n                    }\r\n                });\r\n\r\n                gainAchievements = (\r\n                    <Form.Group>\r\n                        <Form.Label>Gain achievements</Form.Label>\r\n                        <div className=\"d-flex flex-column align-items-start ml-5\">\r\n                            {gainAchievementsArray}\r\n                        </div>\r\n                    </Form.Group>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Container>\r\n                    <Form className=\"mt-3 mb-5\">\r\n                        <h1>Edit trip</h1>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formGridName\">\r\n                                <Form.Label>Name of trip</Form.Label>\r\n                                <Form.Control value={this.state.trip.name} />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridShortName\">\r\n                                <Form.Label>Identificatation name</Form.Label>\r\n                                <Form.Control\r\n                                    value={this.state.trip.short_name}\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formGridDeposit\">\r\n                                <Form.Label>Deposit</Form.Label>\r\n                                <Form.Control value={this.state.trip.deposit} />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridExperience\">\r\n                                <Form.Label>Required level</Form.Label>\r\n                                <Form.Control\r\n                                    value={this.state.trip.requiered_level}\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group\r\n                                as={Col}\r\n                                controlId=\"exampleForm.ControlSelect1\"\r\n                            >\r\n                                <Form.Label>Possible XP reward</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    {possibleXPrewardOptions}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                as={Col}\r\n                                controlId=\"exampleForm.ControlSelect1\"\r\n                            >\r\n                                <Form.Label>Category</Form.Label>\r\n                                {categoryOptions}\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Group controlId=\"formGridLocation\">\r\n                            <Form.Label>Location</Form.Label>\r\n                            <Form.Control value={this.state.trip.location} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                rows=\"5\"\r\n                                value={this.state.trip.description}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Row>\r\n                            <Form.Group\r\n                                as={Col}\r\n                                className=\"pl-5\"\r\n                                controlId=\"formGridName\"\r\n                            >\r\n                                {requiredAchievements}\r\n                            </Form.Group>\r\n                            <Form.Group\r\n                                as={Col}\r\n                                className=\"pl-5\"\r\n                                controlId=\"formGridName\"\r\n                            >\r\n                                {gainAchievements}\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Edit;\r\n"]},"metadata":{},"sourceType":"module"}