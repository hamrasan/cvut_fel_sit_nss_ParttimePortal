{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asher\\\\Desktop\\\\\\u0160kola\\\\4 Sem\\\\RSP\\\\Dev\\\\rsproject\\\\FrontEnd\\\\travel-and-work-app\\\\src\\\\Components\\\\Admin\\\\Achievement\\\\Edit.js\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Col, Button, Row } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport icons from \"../../../Files/icons.json\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport ButtonInRow from \"../../SmartGadgets/ButtonInRow\";\nimport rules from \"../../../Files/validationRules.json\";\nimport { formValidation, validationFeedback, validationClassName } from \"../../../Validator\";\n\nclass Edit extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      achievement: {\n        name: null,\n        description: null,\n        icon: null\n      },\n      form: {\n        isValid: false,\n        elements: {\n          icon: {\n            idForUpdate: true,\n            touched: false,\n            valid: false,\n            validationRules: rules.achievement.icon\n          },\n          name: {\n            touched: false,\n            valid: false,\n            validationRules: rules.achievement.name\n          },\n          description: {\n            touched: false,\n            valid: false,\n            validationRules: rules.achievement.description\n          }\n        }\n      }\n    };\n\n    this.inputUpdateHandler = async (event, nameOfFormInput) => {\n      const newState = { ...this.state.achievement\n      };\n      if (this.state.form.elements[nameOfFormInput].idForUpdate) newState[nameOfFormInput] = event.target.id;else newState[nameOfFormInput] = event.target.value;\n      await this.setState({\n        achievement: newState\n      });\n\n      if (this.state.form.elements[nameOfFormInput].touched) {\n        this.validateForm();\n      }\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.validateForm();\n\n      if (this.state.form.isValid) {\n        fetch(\"http://localhost:8080/achievement/\" + this.props.match.params.id, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(this.state.achievement)\n        }).then(response => {\n          if (response.ok) this.props.history.push(\"/achievement\");\n        });\n      }\n    };\n\n    this.validateForm = async () => {\n      const newState = { ...this.state.form\n      };\n      formValidation(newState, this.state.achievement);\n      await this.setState({\n        form: newState\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`http://localhost:8080/achievement/` + this.props.match.params.id);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      achievement: data\n    });\n  }\n  /**\r\n   * Update state from input.\r\n   * @param {event} event\r\n   * @param {String} nameOfFormInput,\r\n   */\n\n\n  render() {\n    if (this.state.achievement === null) {\n      return /*#__PURE__*/React.createElement(Container, {\n        className: \"mt-5 p-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }\n      }, \"Loading...\")));\n    } else {\n      let iconsToForm = [];\n      icons.icons.forEach(element => {\n        iconsToForm.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: \"m-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Form.Check.Label, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Form.Check, {\n          type: \"radio\",\n          name: \"formHorizontalRadios\",\n          id: element.icon,\n          checked: this.state.achievement.icon == element.icon ? \"checked\" : \"\",\n          onChange: event => this.inputUpdateHandler(event, \"icon\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          className: this.state.achievement.icon == element.icon ? \"choosen-icon\" : \"\",\n          icon: element.icon,\n          size: \"3x\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }\n        }))));\n      });\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ButtonInRow, {\n        variant: \"danger\",\n        link: \"/achievement\",\n        side: \"left\",\n        label: \"\",\n        back: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Form, {\n        className: \"mt-3 mb-5\",\n        onSubmit: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }\n      }, \"Edit achievement\"), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }\n      }, \"Name of trip\"), /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.achievement.name,\n        onChange: event => this.inputUpdateHandler(event, \"name\"),\n        className: validationClassName(\"name\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 29\n        }\n      }, validationFeedback(\"name\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"exampleForm.ControlTextarea1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        rows: \"5\",\n        value: this.state.achievement.description,\n        onChange: event => this.inputUpdateHandler(event, \"description\"),\n        className: validationClassName(\"description\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }\n      }, validationFeedback(\"description\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n        className: \"d-flex flex-row flex-wrap \" + validationClassName(\"icon\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }\n      }, iconsToForm), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }\n      }, validationFeedback(\"icon\", this.state.form)), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    }\n  }\n\n}\n\nexport default Edit;","map":{"version":3,"sources":["C:/Users/asher/Desktop/Å kola/4 Sem/RSP/Dev/rsproject/FrontEnd/travel-and-work-app/src/Components/Admin/Achievement/Edit.js"],"names":["React","Form","Col","Button","Row","Container","FontAwesomeIcon","icons","Spinner","ButtonInRow","rules","formValidation","validationFeedback","validationClassName","Edit","Component","state","achievement","name","description","icon","form","isValid","elements","idForUpdate","touched","valid","validationRules","inputUpdateHandler","event","nameOfFormInput","newState","target","id","value","setState","validateForm","submitHandler","preventDefault","fetch","props","match","params","method","headers","body","JSON","stringify","then","response","ok","history","push","componentDidMount","data","json","console","log","render","iconsToForm","forEach","element"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col, Button, Row } from \"react-bootstrap\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport icons from \"../../../Files/icons.json\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport ButtonInRow from \"../../SmartGadgets/ButtonInRow\";\r\nimport rules from \"../../../Files/validationRules.json\";\r\nimport {\r\n    formValidation,\r\n    validationFeedback,\r\n    validationClassName,\r\n} from \"../../../Validator\";\r\n\r\nclass Edit extends React.Component {\r\n    state = {\r\n        achievement: { name: null, description: null, icon: null },\r\n        form: {\r\n            isValid: false,\r\n            elements: {\r\n                icon: {\r\n                    idForUpdate: true,\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.achievement.icon,\r\n                },\r\n                name: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.achievement.name,\r\n                },\r\n                description: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.achievement.description,\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch(\r\n            `http://localhost:8080/achievement/` + this.props.match.params.id\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        this.setState({ achievement: data });\r\n    }\r\n\r\n    /**\r\n     * Update state from input.\r\n     * @param {event} event\r\n     * @param {String} nameOfFormInput,\r\n     */\r\n    inputUpdateHandler = async (event, nameOfFormInput) => {\r\n        const newState = { ...this.state.achievement };\r\n        if (this.state.form.elements[nameOfFormInput].idForUpdate)\r\n            newState[nameOfFormInput] = event.target.id;\r\n        else newState[nameOfFormInput] = event.target.value;\r\n        await this.setState({ achievement: newState });\r\n        if (this.state.form.elements[nameOfFormInput].touched) {\r\n            this.validateForm();\r\n        }\r\n    };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.validateForm();\r\n        if (this.state.form.isValid) {\r\n            fetch(\r\n                \"http://localhost:8080/achievement/\" +\r\n                    this.props.match.params.id,\r\n                {\r\n                    method: \"PATCH\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(this.state.achievement),\r\n                }\r\n            ).then((response) => {\r\n                if (response.ok) this.props.history.push(\"/achievement\");\r\n            });\r\n        }\r\n    };\r\n\r\n    validateForm = async () => {\r\n        const newState = { ...this.state.form };\r\n        formValidation(newState, this.state.achievement);\r\n        await this.setState({ form: newState });\r\n    };\r\n\r\n    render() {\r\n        if (this.state.achievement === null) {\r\n            return (\r\n                <Container className=\"mt-5 p-5\">\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </Container>\r\n            );\r\n        } else {\r\n            let iconsToForm = [];\r\n\r\n            icons.icons.forEach((element) => {\r\n                iconsToForm.push(\r\n                    <div className=\"m-5\">\r\n                        <Form.Check.Label>\r\n                            <Form.Check\r\n                                type=\"radio\"\r\n                                name=\"formHorizontalRadios\"\r\n                                id={element.icon}\r\n                                checked={\r\n                                    this.state.achievement.icon == element.icon\r\n                                        ? \"checked\"\r\n                                        : \"\"\r\n                                }\r\n                                onChange={(event) =>\r\n                                    this.inputUpdateHandler(event, \"icon\")\r\n                                }\r\n                            />\r\n                            <FontAwesomeIcon\r\n                                className={\r\n                                    this.state.achievement.icon == element.icon\r\n                                        ? \"choosen-icon\"\r\n                                        : \"\"\r\n                                }\r\n                                icon={element.icon}\r\n                                size=\"3x\"\r\n                            />\r\n                        </Form.Check.Label>\r\n                    </div>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <Container>\r\n                    <ButtonInRow\r\n                        variant=\"danger\"\r\n                        link=\"/achievement\"\r\n                        side=\"left\"\r\n                        label=\"\"\r\n                        back={true}\r\n                    />\r\n\r\n                    <Form className=\"mt-3 mb-5\" onSubmit={this.submitHandler}>\r\n                        <h1>Edit achievement</h1>\r\n\r\n                        <Form.Group as={Col} controlId=\"formGridName\">\r\n                            <Form.Label>Name of trip</Form.Label>\r\n                            <Form.Control\r\n                                value={this.state.achievement.name}\r\n                                onChange={(event) =>\r\n                                    this.inputUpdateHandler(event, \"name\")\r\n                                }\r\n                                className={validationClassName(\r\n                                    \"name\",\r\n                                    this.state.form\r\n                                )}\r\n                            />\r\n                            <div class=\"invalid-feedback\">\r\n                                {validationFeedback(\"name\", this.state.form)}\r\n                            </div>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                rows=\"5\"\r\n                                value={this.state.achievement.description}\r\n                                onChange={(event) =>\r\n                                    this.inputUpdateHandler(\r\n                                        event,\r\n                                        \"description\"\r\n                                    )\r\n                                }\r\n                                className={validationClassName(\r\n                                    \"description\",\r\n                                    this.state.form\r\n                                )}\r\n                            />\r\n                            <div class=\"invalid-feedback\">\r\n                                {validationFeedback(\r\n                                    \"description\",\r\n                                    this.state.form\r\n                                )}\r\n                            </div>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group\r\n                            className={\r\n                                \"d-flex flex-row flex-wrap \" +\r\n                                validationClassName(\"icon\", this.state.form)\r\n                            }\r\n                        >\r\n                            {iconsToForm}\r\n                        </Form.Group>\r\n                        <div class=\"invalid-feedback\">\r\n                            {validationFeedback(\"icon\", this.state.form)}\r\n                        </div>\r\n\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Edit;\r\n"]},"metadata":{},"sourceType":"module"}