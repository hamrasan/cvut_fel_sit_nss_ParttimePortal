{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asher\\\\Desktop\\\\\\u0160kola\\\\4 Sem\\\\RSP\\\\Dev\\\\rsproject\\\\FrontEnd\\\\travel-and-work-app\\\\src\\\\Components\\\\Register.js\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Col, Button, Row, Spinner } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport image from \"../Files/images/register.jpg\";\nimport rules from \"../Files/validationRules.json\";\nimport DICTIONARY from \"../Files/dictionary.json\";\nimport { formValidation, validationFeedback, validationClassName } from \"../Validator\";\n\nclass Home extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: {\n        isValid: false,\n        elements: {\n          firstName: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.firstName\n          },\n          lastName: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.lastName\n          },\n          email: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.email\n          },\n          password: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.password\n          },\n          city: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.city\n          },\n          street: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.street\n          },\n          houseNumber: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.houseNumber\n          },\n          zipCode: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.zipCode\n          },\n          country: {\n            touched: false,\n            valid: false,\n            validationRules: rules.registration.country\n          }\n        }\n      },\n      user: {\n        firstName: null,\n        lastName: null,\n        username: \"stylishslave\",\n        email: null,\n        password: null,\n        city: null,\n        street: null,\n        houseNumber: null,\n        zipCode: [],\n        country: [],\n        role: \"ROLE_USER\"\n      }\n    };\n\n    this.inputUpdateHandler = async (event, nameOfFormInput, select) => {\n      let newState = { ...this.state.user\n      }; //string inputs\n\n      if (Object.keys(newState).includes(nameOfFormInput)) {\n        if (select && event.target.value == 0) {\n          newState[nameOfFormInput] = null;\n        } else {\n          newState[nameOfFormInput] = event.target.value;\n        }\n      } //TODO: zjistit proc to trva o interval vic\n      //problem je s console.log() ten vraj nema aktualny state ale ten pred jeho aktualizaciou\n      //natrafil som ale aj tak na problemy ked som nieco z formularu posielal do rodicovkeho komponentu\n      //a vyriesil som to tak ze pred atributy metody dopises async cize ...handler = async (event,...\n      //a ked this.setState dopises await\n      //console.log(newState);\n\n\n      await this.setState({\n        user: newState\n      });\n\n      if (this.state.form.elements[nameOfFormInput].touched) {\n        this.validateForm();\n      }\n\n      console.log(this.state.user);\n    };\n\n    this.validateForm = async () => {\n      const newState = { ...this.state.form\n      };\n      formValidation(newState, this.state.user);\n      await this.setState({\n        form: newState\n      });\n    };\n\n    this.submitHandler = async event => {\n      event.preventDefault();\n      console.log(this.state.user);\n      this.validateForm();\n      /*fetch(\"http://localhost:8080/trip\", {\r\n          method: \"POST\",\r\n          mode: \"cors\",\r\n          headers: {\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(this.state.trip),\r\n      }).then((response) => {\r\n          if (response.ok) this.props.history.push(\"/trip\");\r\n          //TODO - osetrenie vynimiek\r\n          else console.log(\"Error: somethhing goes wrong\");\r\n      });*/\n    };\n  }\n\n  render() {\n    let countryOptions = null;\n\n    if (DICTIONARY.countries.length > 0) {\n      let countriesArray = [];\n      countriesArray.push( /*#__PURE__*/React.createElement(\"option\", {\n        value: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      }, DICTIONARY.form.first_option));\n\n      for (var i = 0; i < DICTIONARY.countries.length; i++) {\n        countriesArray.push( /*#__PURE__*/React.createElement(\"option\", {\n          key: i + 1,\n          value: DICTIONARY.countries[i],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }\n        }, DICTIONARY.countries[i]));\n      }\n\n      countryOptions = /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"select\",\n        placeholder: \"Enter name\",\n        onChange: event => this.inputUpdateHandler(event, \"country\", true),\n        className: validationClassName(\"country\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      }, countriesArray, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }, validationFeedback(\"country\", this.state.form)));\n    }\n\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"register_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    }, \"Register new user\"), /*#__PURE__*/React.createElement(Form, {\n      className: \"registerUserForm mt-3 mb-5\",\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"window radius\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 33\n      }\n    }, \"Account information\"), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 41\n      }\n    }, \"First name\"), /*#__PURE__*/React.createElement(Form.Control, {\n      maxLength: \"30\",\n      autoComplete: \"name\",\n      placeholder: \"Enter your first name\",\n      onChange: event => this.inputUpdateHandler(event, \"firstName\"),\n      className: validationClassName(\"firstName\", this.state.form),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 41\n      }\n    }, validationFeedback(\"firstName\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 41\n      }\n    }, \"Last name\"), /*#__PURE__*/React.createElement(Form.Control, {\n      maxLength: \"30\",\n      placeholder: \"Enter your last name\",\n      onChange: event => this.inputUpdateHandler(event, \"lastName\"),\n      className: validationClassName(\"lastName\", this.state.form),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 41\n      }\n    }, validationFeedback(\"lastName\", this.state.form)))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 41\n      }\n    }, \"E-mail\"), /*#__PURE__*/React.createElement(Form.Control, {\n      maxLength: \"50\",\n      name: \"email\",\n      autoComplete: \"email\",\n      type: \"email\",\n      placeholder: \"Enter your valid e-mail\",\n      onChange: event => this.inputUpdateHandler(event, \"email\"),\n      className: validationClassName(\"email\", this.state.form),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 41\n      }\n    }, validationFeedback(\"email\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 41\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n      maxLength: \"30\",\n      minLength: \"8\",\n      maxLength: \"16\",\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: event => this.inputUpdateHandler(event, \"password\"),\n      className: validationClassName(\"password\", this.state.form),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 41\n      }\n    }, validationFeedback(\"password\", this.state.form))))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"window radius\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 33\n      }\n    }, \"Adress\"), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 41\n      }\n    }, \"City\"), /*#__PURE__*/React.createElement(Form.Control, {\n      maxLength: \"100\",\n      placeholder: \"City\",\n      onChange: event => this.inputUpdateHandler(event, \"city\"),\n      className: validationClassName(\"city\", this.state.form),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 41\n      }\n    }, validationFeedback(\"city\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 41\n      }\n    }, \"Street\"), /*#__PURE__*/React.createElement(Form.Control, {\n      maxLength: \"50\",\n      placeholder: \"Street\",\n      onChange: event => this.inputUpdateHandler(event, \"street\"),\n      className: validationClassName(\"street\", this.state.form),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 41\n      }\n    }, validationFeedback(\"street\", this.state.form)))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 41\n      }\n    }, \"ZIP code\"), /*#__PURE__*/React.createElement(Form.Control, {\n      min: \"10000\",\n      max: \"99999\",\n      maxLength: \"5\",\n      type: \"number\",\n      placeholder: \"ZIP code\",\n      onChange: event => this.inputUpdateHandler(event, \"zipCode\"),\n      className: validationClassName(\"zipCode\", this.state.form),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 41\n      }\n    }, validationFeedback(\"zipCode\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 41\n      }\n    }, \"Country\"), countryOptions), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"submit\",\n      variant: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 37\n      }\n    }, \"Create new account\")))))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/asher/Desktop/Škola/4 Sem/RSP/Dev/rsproject/FrontEnd/travel-and-work-app/src/Components/Register.js"],"names":["React","Form","Col","Button","Row","Spinner","Container","image","rules","DICTIONARY","formValidation","validationFeedback","validationClassName","Home","Component","state","form","isValid","elements","firstName","touched","valid","validationRules","registration","lastName","email","password","city","street","houseNumber","zipCode","country","user","username","role","inputUpdateHandler","event","nameOfFormInput","select","newState","Object","keys","includes","target","value","setState","validateForm","console","log","submitHandler","preventDefault","render","countryOptions","countries","length","countriesArray","push","first_option","i"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col, Button, Row, Spinner } from \"react-bootstrap\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport image from \"../Files/images/register.jpg\";\r\nimport rules from \"../Files/validationRules.json\";\r\nimport DICTIONARY from \"../Files/dictionary.json\";\r\nimport {\r\n    formValidation,\r\n    validationFeedback,\r\n    validationClassName,\r\n} from \"../Validator\";\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        form: {\r\n            isValid: false,\r\n            elements: {\r\n                firstName: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.firstName,\r\n                },\r\n                lastName: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.lastName,\r\n                },\r\n                email: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.email,\r\n                },\r\n                password: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.password,\r\n                },\r\n                city: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.city,\r\n                },\r\n                street: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.street,\r\n                },\r\n                houseNumber: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.houseNumber,\r\n                },\r\n                zipCode: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.zipCode,\r\n                },\r\n                country: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.registration.country,\r\n                },\r\n            },\r\n        },\r\n        user: {\r\n            firstName: null,\r\n            lastName: null,\r\n            username: \"stylishslave\",\r\n            email: null,\r\n            password: null,\r\n            city: null,\r\n            street: null,\r\n            houseNumber: null,\r\n            zipCode: [],\r\n            country: [],\r\n            role: \"ROLE_USER\",\r\n        },\r\n    };\r\n    inputUpdateHandler = async (event, nameOfFormInput, select) => {\r\n        let newState = { ...this.state.user };\r\n\r\n        //string inputs\r\n        if (Object.keys(newState).includes(nameOfFormInput)) {\r\n            if (select && event.target.value == 0) {\r\n                newState[nameOfFormInput] = null;\r\n            } else {\r\n                newState[nameOfFormInput] = event.target.value;\r\n            }\r\n        }\r\n        //TODO: zjistit proc to trva o interval vic\r\n        //problem je s console.log() ten vraj nema aktualny state ale ten pred jeho aktualizaciou\r\n        //natrafil som ale aj tak na problemy ked som nieco z formularu posielal do rodicovkeho komponentu\r\n        //a vyriesil som to tak ze pred atributy metody dopises async cize ...handler = async (event,...\r\n        //a ked this.setState dopises await\r\n        //console.log(newState);\r\n        await this.setState({ user: newState });\r\n        if (this.state.form.elements[nameOfFormInput].touched) {\r\n            this.validateForm();\r\n        }\r\n        console.log(this.state.user);\r\n    };\r\n\r\n    validateForm = async () => {\r\n        const newState = { ...this.state.form };\r\n        formValidation(newState, this.state.user);\r\n        await this.setState({ form: newState });\r\n    };\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        console.log(this.state.user);\r\n        this.validateForm();\r\n\r\n        /*fetch(\"http://localhost:8080/trip\", {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(this.state.trip),\r\n        }).then((response) => {\r\n            if (response.ok) this.props.history.push(\"/trip\");\r\n            //TODO - osetrenie vynimiek\r\n            else console.log(\"Error: somethhing goes wrong\");\r\n        });*/\r\n    };\r\n    render() {\r\n        let countryOptions = null;\r\n        if (DICTIONARY.countries.length > 0) {\r\n            let countriesArray = [];\r\n\r\n            countriesArray.push(\r\n                <option value=\"0\">{DICTIONARY.form.first_option}</option>\r\n            );\r\n\r\n            for (var i = 0; i < DICTIONARY.countries.length; i++) {\r\n                countriesArray.push(\r\n                    <option key={i + 1} value={DICTIONARY.countries[i]}>\r\n                        {DICTIONARY.countries[i]}\r\n                    </option>\r\n                );\r\n            }\r\n            countryOptions = (\r\n                <Form.Control\r\n                    as=\"select\"\r\n                    placeholder=\"Enter name\"\r\n                    onChange={(event) =>\r\n                        this.inputUpdateHandler(event, \"country\", true)\r\n                    }\r\n                    className={validationClassName(\"country\", this.state.form)}\r\n                >\r\n                    {countriesArray}\r\n                    <div class=\"invalid-feedback\">\r\n                        {validationFeedback(\"country\", this.state.form)}\r\n                    </div>\r\n                </Form.Control>\r\n            );\r\n        }\r\n        return (\r\n            <Container className=\"register_container\">\r\n                <Row>\r\n                    <Col xs={5}>\r\n                        <img src={image} />\r\n                    </Col>\r\n                    <Col>\r\n                        <h3>Register new user</h3>\r\n                        <Form\r\n                            className=\"registerUserForm mt-3 mb-5\"\r\n                            onSubmit={this.submitHandler}\r\n                        >\r\n                            <div className=\"window radius\">\r\n                                <h5>Account information</h5>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>First name</Form.Label>\r\n                                        <Form.Control\r\n                                            maxLength=\"30\"\r\n                                            autoComplete=\"name\"\r\n                                            placeholder=\"Enter your first name\"\r\n                                            onChange={(event) =>\r\n                                                this.inputUpdateHandler(\r\n                                                    event,\r\n                                                    \"firstName\"\r\n                                                )\r\n                                            }\r\n                                            className={validationClassName(\r\n                                                \"firstName\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        />\r\n                                        <div class=\"invalid-feedback\">\r\n                                            {validationFeedback(\r\n                                                \"firstName\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        </div>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Last name</Form.Label>\r\n                                        <Form.Control\r\n                                            maxLength=\"30\"\r\n                                            placeholder=\"Enter your last name\"\r\n                                            onChange={(event) =>\r\n                                                this.inputUpdateHandler(\r\n                                                    event,\r\n                                                    \"lastName\"\r\n                                                )\r\n                                            }\r\n                                            className={validationClassName(\r\n                                                \"lastName\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        />\r\n                                        <div class=\"invalid-feedback\">\r\n                                            {validationFeedback(\r\n                                                \"lastName\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        </div>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>E-mail</Form.Label>\r\n                                        <Form.Control\r\n                                            maxLength=\"50\"\r\n                                            name=\"email\"\r\n                                            autoComplete=\"email\"\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter your valid e-mail\"\r\n                                            onChange={(event) =>\r\n                                                this.inputUpdateHandler(\r\n                                                    event,\r\n                                                    \"email\"\r\n                                                )\r\n                                            }\r\n                                            className={validationClassName(\r\n                                                \"email\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        />\r\n                                        <div class=\"invalid-feedback\">\r\n                                            {validationFeedback(\r\n                                                \"email\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        </div>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control\r\n                                            maxLength=\"30\"\r\n                                            minLength=\"8\"\r\n                                            maxLength=\"16\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            onChange={(event) =>\r\n                                                this.inputUpdateHandler(\r\n                                                    event,\r\n                                                    \"password\"\r\n                                                )\r\n                                            }\r\n                                            className={validationClassName(\r\n                                                \"password\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        />\r\n                                        <div class=\"invalid-feedback\">\r\n                                            {validationFeedback(\r\n                                                \"password\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        </div>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"window radius\">\r\n                                <h5>Adress</h5>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>City</Form.Label>\r\n                                        <Form.Control\r\n                                            maxLength=\"100\"\r\n                                            placeholder=\"City\"\r\n                                            onChange={(event) =>\r\n                                                this.inputUpdateHandler(\r\n                                                    event,\r\n                                                    \"city\"\r\n                                                )\r\n                                            }\r\n                                            className={validationClassName(\r\n                                                \"city\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        />\r\n                                        <div class=\"invalid-feedback\">\r\n                                            {validationFeedback(\r\n                                                \"city\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        </div>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Street</Form.Label>\r\n                                        <Form.Control\r\n                                            maxLength=\"50\"\r\n                                            placeholder=\"Street\"\r\n                                            onChange={(event) =>\r\n                                                this.inputUpdateHandler(\r\n                                                    event,\r\n                                                    \"street\"\r\n                                                )\r\n                                            }\r\n                                            className={validationClassName(\r\n                                                \"street\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        />\r\n                                        <div class=\"invalid-feedback\">\r\n                                            {validationFeedback(\r\n                                                \"street\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        </div>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}></Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>ZIP code</Form.Label>\r\n                                        <Form.Control\r\n                                            min=\"10000\"\r\n                                            max=\"99999\"\r\n                                            maxLength=\"5\"\r\n                                            type=\"number\"\r\n                                            placeholder=\"ZIP code\"\r\n                                            onChange={(event) =>\r\n                                                this.inputUpdateHandler(\r\n                                                    event,\r\n                                                    \"zipCode\"\r\n                                                )\r\n                                            }\r\n                                            className={validationClassName(\r\n                                                \"zipCode\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        />\r\n                                        <div class=\"invalid-feedback\">\r\n                                            {validationFeedback(\r\n                                                \"zipCode\",\r\n                                                this.state.form\r\n                                            )}\r\n                                        </div>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Country</Form.Label>\r\n                                        {countryOptions}\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}></Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Button\r\n                                        className=\"submit\"\r\n                                        variant=\"primary\"\r\n                                        type=\"submit\"\r\n                                    >\r\n                                        Create new account\r\n                                    </Button>\r\n                                </Form.Row>\r\n                            </div>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}