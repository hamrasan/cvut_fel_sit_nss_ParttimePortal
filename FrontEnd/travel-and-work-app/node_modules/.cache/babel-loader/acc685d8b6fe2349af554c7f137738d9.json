{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asher\\\\Desktop\\\\\\u0160kola\\\\4 Sem\\\\RSP\\\\Dev\\\\rsproject\\\\FrontEnd\\\\travel-and-work-app\\\\src\\\\Components\\\\Admin\\\\Trip\\\\Create.js\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Col, Button, Row, Spinner } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport Achievements from \"./UI/Achievements\";\nimport SessionGroup from \"./SessionGroup\";\nimport ButtonInRow from \"../../SmartGadgets/ButtonInRow\";\nimport rules from \"../../../Files/validationRules.json\";\nimport { formValidation, validationFeedback, validationClassName } from \"../../../Validator\";\n\nclass Create extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      achievements: null,\n      categories: null,\n      form: {\n        isValid: false,\n        elements: {\n          name: {\n            touched: false,\n            valid: false,\n            validationRules: rules.trip.name\n          },\n          short_name: {\n            touched: false,\n            valid: false,\n            validationRules: rules.trip.short_name\n          },\n          deposit: {\n            touched: false,\n            valid: false,\n            validationRules: rules.trip.deposit\n          },\n          required_level: {\n            touched: false,\n            valid: false,\n            validationRules: rules.trip.required_level\n          },\n          possible_xp_reward: {\n            touched: false,\n            valid: false,\n            validationRules: rules.trip.possible_xp_reward\n          },\n          category: {\n            touched: false,\n            valid: false,\n            validationRules: rules.trip.category\n          },\n          location: {\n            touched: false,\n            valid: false,\n            validationRules: rules.trip.location\n          },\n          description: {\n            touched: false,\n            valid: false,\n            validationRules: rules.trip.description\n          }\n        }\n      },\n      trip: {\n        name: null,\n        short_name: null,\n        deposit: null,\n        required_level: null,\n        possible_xp_reward: null,\n        category: null,\n        location: null,\n        description: null,\n        required_achievements: [],\n        gain_achievements: [],\n        sessions: []\n      }\n    };\n\n    this.inputUpdateHandler = async (event, nameOfFormInput) => {\n      const stringProperties = [\"name\", \"short_name\", \"deposit\", \"required_level\", \"possible_xp_reward\", \"location\", \"description\"];\n      const checkboxProperties = [\"required_achievements\", \"gain_achievements\"];\n      const newState = { ...this.state.trip\n      }; //string inputs\n\n      if (stringProperties.includes(nameOfFormInput)) {\n        newState[nameOfFormInput] = event.target.value;\n      } else if (checkboxProperties.includes(nameOfFormInput)) {\n        let found = newState[nameOfFormInput].find(object => {\n          return object.id == event.target.id;\n        }); //if found element, that means user unchecked element\n\n        if (found) {\n          let index = newState[nameOfFormInput].indexOf(found);\n          newState[nameOfFormInput].splice(index, 1);\n        } //push achievement\n        else {\n            let found = this.state.achievements.find(object => {\n              return object.id == event.target.id;\n            });\n\n            if (found) {\n              newState[nameOfFormInput].push(found);\n            }\n          }\n      } else if (nameOfFormInput == \"category\") {\n        console.log(event.target.value);\n        let foundIndex = this.state.categories.findIndex(category => category.name == event.target.value);\n\n        if (foundIndex > -1) {\n          newState.category = this.state.categories[foundIndex];\n        }\n      }\n\n      await this.setState({\n        trip: newState\n      });\n\n      if (this.state.form.elements[nameOfFormInput].touched) {\n        this.validateForm();\n      }\n    };\n\n    this.sessionDeleteHandler = session => {\n      let newState = [...this.state.trip.sessions];\n      const found = newState.findIndex(element => {\n        return element.index == session.index;\n      });\n\n      if (found > -1) {\n        newState.splice(found, 1);\n      }\n\n      this.setState(oldState => ({\n        trip: { ...oldState.trip,\n          sessions: newState\n        }\n      }));\n      console.log(this.state.trip.sessions);\n    };\n\n    this.inputSessionUpdateHandler = session => {\n      console.log(this.state.trip);\n      let newState = { ...this.state\n      };\n      const found = newState.trip.sessions.findIndex(element => {\n        return element.index == session.index;\n      });\n      console.log(\"found: \" + found);\n\n      if (found > -1) {\n        console.log(\"if in inputSessionUpdate\");\n        newState.trip.sessions[found] = session;\n      } else {\n        console.log(\"else in inputSessionUpdate\");\n        session.index = this.state.trip.sessions.length;\n        newState.trip.sessions.push(session);\n        console.log(\"new\");\n        console.log(newState);\n      }\n\n      this.setState(newState);\n      console.log(\"bavi?\");\n      console.log(this.state);\n    };\n\n    this.submitHandler = async event => {\n      event.preventDefault();\n      await this.validateForm();\n\n      if (this.state.form.isValid) {\n        fetch(\"http://localhost:8080/trip\", {\n          method: \"POST\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(this.state.trip)\n        }).then(response => {\n          if (response.ok) this.props.history.push(\"/trip\"); //TODO - osetrenie vynimiek\n          else console.log(\"Error: somethhing goes wrong\");\n        });\n      }\n    };\n\n    this.validateForm = async () => {\n      console.log(\"in validation\");\n      const newState = { ...this.state.form\n      };\n      formValidation(newState, this.state.trip);\n      await this.setState({\n        form: newState\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const response1 = await fetch(`http://localhost:8080/category`);\n    const data1 = await response1.json();\n    console.log(data1);\n    this.setState({\n      categories: data1\n    });\n    const response2 = await fetch(`http://localhost:8080/achievement`);\n    const data2 = await response2.json();\n    console.log(data2); //show: false -> add class name to button and hide it\n\n    this.setState({\n      achievements: data2\n    });\n  }\n\n  render() {\n    if (this.state.achievements == null && this.state.categories == null) {\n      return /*#__PURE__*/React.createElement(Container, {\n        className: \"p-5 mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }\n      }, \"Loading...\")));\n    } else {\n      let possibleXPrewardOptions = [];\n      possibleXPrewardOptions.push( /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 42\n        }\n      }, \"Select..\"));\n\n      for (let i = 0; i < 25; i++) {\n        possibleXPrewardOptions.push( /*#__PURE__*/React.createElement(\"option\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 46\n          }\n        }, i + 1));\n      }\n\n      let categoryOptions = null;\n\n      if (this.state.categories.length > 0) {\n        let categoriesArray = [];\n        categoriesArray.push( /*#__PURE__*/React.createElement(\"option\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 38\n          }\n        }, \"Select category..\"));\n        this.state.categories.forEach(element => {\n          categoriesArray.push( /*#__PURE__*/React.createElement(\"option\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 42\n            }\n          }, element.name));\n        });\n        categoryOptions = /*#__PURE__*/React.createElement(Form.Control, {\n          as: \"select\",\n          onChange: event => this.inputUpdateHandler(event, \"category\"),\n          className: validationClassName(\"category\", this.state.form),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 21\n          }\n        }, categoriesArray, /*#__PURE__*/React.createElement(\"div\", {\n          class: \"invalid-feedback\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 25\n          }\n        }, validationFeedback(\"category\", this.state.form)));\n      }\n\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ButtonInRow, {\n        variant: \"danger\",\n        link: \"/trip\",\n        side: \"left\",\n        label: \"\",\n        back: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Form, {\n        className: \"mt-3 mb-5\",\n        onSubmit: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }\n      }, \"Create trip\"), /*#__PURE__*/React.createElement(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 33\n        }\n      }, \"Name of trip\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Enter name\",\n        onChange: event => this.inputUpdateHandler(event, \"name\"),\n        className: validationClassName(\"name\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 33\n        }\n      }, validationFeedback(\"name\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridShortName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 33\n        }\n      }, \"Identificatation name\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Enter unique key for trip\",\n        onChange: event => this.inputUpdateHandler(event, \"short_name\"),\n        className: validationClassName(\"short_name\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 33\n        }\n      }, validationFeedback(\"short_name\", this.state.form)))), /*#__PURE__*/React.createElement(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridDeposit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 33\n        }\n      }, \"Deposit\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Enter deposite price\",\n        onChange: event => this.inputUpdateHandler(event, \"deposit\"),\n        className: validationClassName(\"deposit\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 33\n        }\n      }, validationFeedback(\"deposit\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridExperience\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 33\n        }\n      }, \"Required level\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Enter minimum reqiured level\",\n        onChange: event => this.inputUpdateHandler(event, \"required_level\"),\n        className: validationClassName(\"required_level\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 33\n        }\n      }, validationFeedback(\"required_level\", this.state.form)))), /*#__PURE__*/React.createElement(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"exampleForm.ControlSelect1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 33\n        }\n      }, \"Possible XP reward\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"select\",\n        onChange: event => this.inputUpdateHandler(event, \"possible_xp_reward\"),\n        className: validationClassName(\"possible_xp_reward\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 33\n        }\n      }, possibleXPrewardOptions), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 33\n        }\n      }, validationFeedback(\"possible_xp_reward\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"exampleForm.ControlSelect1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 33\n        }\n      }, \"Category\"), categoryOptions)), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"formGridLocation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 29\n        }\n      }, \"Location\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Hotel Super, London Street 12, Manchester, England\",\n        onChange: event => this.inputUpdateHandler(event, \"location\"),\n        className: validationClassName(\"location\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 29\n        }\n      }, validationFeedback(\"location\", this.state.form))), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"exampleForm.ControlTextarea1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 29\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        rows: \"5\",\n        onChange: event => this.inputUpdateHandler(event, \"description\"),\n        className: validationClassName(\"description\", this.state.form),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 29\n        }\n      }, validationFeedback(\"description\", this.state.form))), /*#__PURE__*/React.createElement(Achievements, {\n        items: this.state.achievements,\n        onChangeMethod: this.inputUpdateHandler,\n        selectedGain: [],\n        selectedRequired: [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(SessionGroup, {\n        onChangeMethod: this.inputSessionUpdateHandler,\n        sessions: this.state.trip.sessions,\n        forDeleteSession: this.sessionDeleteHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    }\n  }\n\n}\n\nexport default Create;","map":{"version":3,"sources":["C:/Users/asher/Desktop/Škola/4 Sem/RSP/Dev/rsproject/FrontEnd/travel-and-work-app/src/Components/Admin/Trip/Create.js"],"names":["React","Form","Col","Button","Row","Spinner","Container","Achievements","SessionGroup","ButtonInRow","rules","formValidation","validationFeedback","validationClassName","Create","Component","state","achievements","categories","form","isValid","elements","name","touched","valid","validationRules","trip","short_name","deposit","required_level","possible_xp_reward","category","location","description","required_achievements","gain_achievements","sessions","inputUpdateHandler","event","nameOfFormInput","stringProperties","checkboxProperties","newState","includes","target","value","found","find","object","id","index","indexOf","splice","push","console","log","foundIndex","findIndex","setState","validateForm","sessionDeleteHandler","session","element","oldState","inputSessionUpdateHandler","length","submitHandler","preventDefault","fetch","method","mode","headers","body","JSON","stringify","then","response","ok","props","history","componentDidMount","response1","data1","json","response2","data2","render","possibleXPrewardOptions","i","categoryOptions","categoriesArray","forEach"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col, Button, Row, Spinner } from \"react-bootstrap\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Achievements from \"./UI/Achievements\";\r\nimport SessionGroup from \"./SessionGroup\";\r\nimport ButtonInRow from \"../../SmartGadgets/ButtonInRow\";\r\nimport rules from \"../../../Files/validationRules.json\";\r\nimport {\r\n    formValidation,\r\n    validationFeedback,\r\n    validationClassName,\r\n} from \"../../../Validator\";\r\n\r\nclass Create extends React.Component {\r\n    state = {\r\n        achievements: null,\r\n        categories: null,\r\n        form: {\r\n            isValid: false,\r\n            elements: {\r\n                name: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.trip.name,\r\n                },\r\n                short_name: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.trip.short_name,\r\n                },\r\n                deposit: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.trip.deposit,\r\n                },\r\n                required_level: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.trip.required_level,\r\n                },\r\n                possible_xp_reward: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.trip.possible_xp_reward,\r\n                },\r\n                category: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.trip.category,\r\n                },\r\n                location: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.trip.location,\r\n                },\r\n                description: {\r\n                    touched: false,\r\n                    valid: false,\r\n                    validationRules: rules.trip.description,\r\n                },\r\n            },\r\n        },\r\n        trip: {\r\n            name: null,\r\n            short_name: null,\r\n            deposit: null,\r\n            required_level: null,\r\n            possible_xp_reward: null,\r\n            category: null,\r\n            location: null,\r\n            description: null,\r\n            required_achievements: [],\r\n            gain_achievements: [],\r\n            sessions: [],\r\n        },\r\n    };\r\n\r\n    /**\r\n     * Update state from input.\r\n     * @param {event} event\r\n     * @param {String} nameOfFormInput\r\n     * @param {Boolean} arrayToPush - if want push to array\r\n     * @param {Boolean} checkbox\r\n     */\r\n    inputUpdateHandler = async (event, nameOfFormInput) => {\r\n        const stringProperties = [\r\n            \"name\",\r\n            \"short_name\",\r\n            \"deposit\",\r\n            \"required_level\",\r\n            \"possible_xp_reward\",\r\n            \"location\",\r\n            \"description\",\r\n        ];\r\n        const checkboxProperties = [\r\n            \"required_achievements\",\r\n            \"gain_achievements\",\r\n        ];\r\n        const newState = { ...this.state.trip };\r\n\r\n        //string inputs\r\n        if (stringProperties.includes(nameOfFormInput)) {\r\n            newState[nameOfFormInput] = event.target.value;\r\n        } else if (checkboxProperties.includes(nameOfFormInput)) {\r\n            let found = newState[nameOfFormInput].find((object) => {\r\n                return object.id == event.target.id;\r\n            });\r\n            //if found element, that means user unchecked element\r\n            if (found) {\r\n                let index = newState[nameOfFormInput].indexOf(found);\r\n                newState[nameOfFormInput].splice(index, 1);\r\n            }\r\n            //push achievement\r\n            else {\r\n                let found = this.state.achievements.find((object) => {\r\n                    return object.id == event.target.id;\r\n                });\r\n\r\n                if (found) {\r\n                    newState[nameOfFormInput].push(found);\r\n                }\r\n            }\r\n        } else if (nameOfFormInput == \"category\") {\r\n            console.log(event.target.value);\r\n            let foundIndex = this.state.categories.findIndex(\r\n                (category) => category.name == event.target.value\r\n            );\r\n            if (foundIndex > -1) {\r\n                newState.category = this.state.categories[foundIndex];\r\n            }\r\n        }\r\n        await this.setState({ trip: newState });\r\n        if (this.state.form.elements[nameOfFormInput].touched) {\r\n            this.validateForm();\r\n        }\r\n    };\r\n\r\n    sessionDeleteHandler = (session) => {\r\n        let newState = [...this.state.trip.sessions];\r\n        const found = newState.findIndex((element) => {\r\n            return element.index == session.index;\r\n        });\r\n        if (found > -1) {\r\n            newState.splice(found, 1);\r\n        }\r\n        this.setState((oldState) => ({\r\n            trip: {\r\n                ...oldState.trip,\r\n                sessions: newState,\r\n            },\r\n        }));\r\n        console.log(this.state.trip.sessions);\r\n    };\r\n\r\n    inputSessionUpdateHandler = (session) => {\r\n        console.log(this.state.trip);\r\n        let newState = { ...this.state };\r\n\r\n        const found = newState.trip.sessions.findIndex((element) => {\r\n            return element.index == session.index;\r\n        });\r\n        console.log(\"found: \" + found);\r\n        if (found > -1) {\r\n            console.log(\"if in inputSessionUpdate\");\r\n            newState.trip.sessions[found] = session;\r\n        } else {\r\n            console.log(\"else in inputSessionUpdate\");\r\n            session.index = this.state.trip.sessions.length;\r\n            newState.trip.sessions.push(session);\r\n            console.log(\"new\");\r\n            console.log(newState);\r\n        }\r\n        this.setState(newState);\r\n        console.log(\"bavi?\");\r\n        console.log(this.state);\r\n    };\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        await this.validateForm();\r\n        if (this.state.form.isValid) {\r\n            fetch(\"http://localhost:8080/trip\", {\r\n                method: \"POST\",\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(this.state.trip),\r\n            }).then((response) => {\r\n                if (response.ok) this.props.history.push(\"/trip\");\r\n                //TODO - osetrenie vynimiek\r\n                else console.log(\"Error: somethhing goes wrong\");\r\n            });\r\n        }\r\n    };\r\n\r\n    validateForm = async () => {\r\n        console.log(\"in validation\");\r\n        const newState = { ...this.state.form };\r\n        formValidation(newState, this.state.trip);\r\n        await this.setState({ form: newState });\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const response1 = await fetch(`http://localhost:8080/category`);\r\n        const data1 = await response1.json();\r\n        console.log(data1);\r\n        this.setState({ categories: data1 });\r\n\r\n        const response2 = await fetch(`http://localhost:8080/achievement`);\r\n        const data2 = await response2.json();\r\n        console.log(data2);\r\n        //show: false -> add class name to button and hide it\r\n        this.setState({ achievements: data2 });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.achievements == null && this.state.categories == null) {\r\n            return (\r\n                <Container className=\"p-5 mt-5\">\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </Container>\r\n            );\r\n        } else {\r\n            let possibleXPrewardOptions = [];\r\n            possibleXPrewardOptions.push(<option>Select..</option>);\r\n            for (let i = 0; i < 25; i++) {\r\n                possibleXPrewardOptions.push(<option>{i + 1}</option>);\r\n            }\r\n\r\n            let categoryOptions = null;\r\n            if (this.state.categories.length > 0) {\r\n                let categoriesArray = [];\r\n                categoriesArray.push(<option>Select category..</option>);\r\n                this.state.categories.forEach((element) => {\r\n                    categoriesArray.push(<option>{element.name}</option>);\r\n                });\r\n                categoryOptions = (\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        onChange={(event) =>\r\n                            this.inputUpdateHandler(event, \"category\")\r\n                        }\r\n                        className={validationClassName(\r\n                            \"category\",\r\n                            this.state.form\r\n                        )}\r\n                    >\r\n                        {categoriesArray}\r\n                        <div class=\"invalid-feedback\">\r\n                            {validationFeedback(\"category\", this.state.form)}\r\n                        </div>\r\n                    </Form.Control>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Container>\r\n                    <ButtonInRow\r\n                        variant=\"danger\"\r\n                        link=\"/trip\"\r\n                        side=\"left\"\r\n                        label=\"\"\r\n                        back={true}\r\n                    />\r\n\r\n                    <Form className=\"mt-3 mb-5\" onSubmit={this.submitHandler}>\r\n                        <h1>Create trip</h1>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formGridName\">\r\n                                <Form.Label>Name of trip</Form.Label>\r\n                                <Form.Control\r\n                                    placeholder=\"Enter name\"\r\n                                    onChange={(event) =>\r\n                                        this.inputUpdateHandler(event, \"name\")\r\n                                    }\r\n                                    className={validationClassName(\r\n                                        \"name\",\r\n                                        this.state.form\r\n                                    )}\r\n                                />\r\n                                <div class=\"invalid-feedback\">\r\n                                    {validationFeedback(\r\n                                        \"name\",\r\n                                        this.state.form\r\n                                    )}\r\n                                </div>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridShortName\">\r\n                                <Form.Label>Identificatation name</Form.Label>\r\n                                <Form.Control\r\n                                    placeholder=\"Enter unique key for trip\"\r\n                                    onChange={(event) =>\r\n                                        this.inputUpdateHandler(\r\n                                            event,\r\n                                            \"short_name\"\r\n                                        )\r\n                                    }\r\n                                    className={validationClassName(\r\n                                        \"short_name\",\r\n                                        this.state.form\r\n                                    )}\r\n                                />\r\n                                <div class=\"invalid-feedback\">\r\n                                    {validationFeedback(\r\n                                        \"short_name\",\r\n                                        this.state.form\r\n                                    )}\r\n                                </div>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formGridDeposit\">\r\n                                <Form.Label>Deposit</Form.Label>\r\n                                <Form.Control\r\n                                    placeholder=\"Enter deposite price\"\r\n                                    onChange={(event) =>\r\n                                        this.inputUpdateHandler(\r\n                                            event,\r\n                                            \"deposit\"\r\n                                        )\r\n                                    }\r\n                                    className={validationClassName(\r\n                                        \"deposit\",\r\n                                        this.state.form\r\n                                    )}\r\n                                />\r\n                                <div class=\"invalid-feedback\">\r\n                                    {validationFeedback(\r\n                                        \"deposit\",\r\n                                        this.state.form\r\n                                    )}\r\n                                </div>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridExperience\">\r\n                                <Form.Label>Required level</Form.Label>\r\n                                <Form.Control\r\n                                    placeholder=\"Enter minimum reqiured level\"\r\n                                    onChange={(event) =>\r\n                                        this.inputUpdateHandler(\r\n                                            event,\r\n                                            \"required_level\"\r\n                                        )\r\n                                    }\r\n                                    className={validationClassName(\r\n                                        \"required_level\",\r\n                                        this.state.form\r\n                                    )}\r\n                                />\r\n                                <div class=\"invalid-feedback\">\r\n                                    {validationFeedback(\r\n                                        \"required_level\",\r\n                                        this.state.form\r\n                                    )}\r\n                                </div>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group\r\n                                as={Col}\r\n                                controlId=\"exampleForm.ControlSelect1\"\r\n                            >\r\n                                <Form.Label>Possible XP reward</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    onChange={(event) =>\r\n                                        this.inputUpdateHandler(\r\n                                            event,\r\n                                            \"possible_xp_reward\"\r\n                                        )\r\n                                    }\r\n                                    className={validationClassName(\r\n                                        \"possible_xp_reward\",\r\n                                        this.state.form\r\n                                    )}\r\n                                >\r\n                                    {possibleXPrewardOptions}\r\n                                </Form.Control>\r\n                                <div class=\"invalid-feedback\">\r\n                                    {validationFeedback(\r\n                                        \"possible_xp_reward\",\r\n                                        this.state.form\r\n                                    )}\r\n                                </div>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                as={Col}\r\n                                controlId=\"exampleForm.ControlSelect1\"\r\n                            >\r\n                                <Form.Label>Category</Form.Label>\r\n                                {categoryOptions}\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Group controlId=\"formGridLocation\">\r\n                            <Form.Label>Location</Form.Label>\r\n                            <Form.Control\r\n                                placeholder=\"Hotel Super, London Street 12, Manchester, England\"\r\n                                onChange={(event) =>\r\n                                    this.inputUpdateHandler(event, \"location\")\r\n                                }\r\n                                className={validationClassName(\r\n                                    \"location\",\r\n                                    this.state.form\r\n                                )}\r\n                            />\r\n                            <div class=\"invalid-feedback\">\r\n                                {validationFeedback(\r\n                                    \"location\",\r\n                                    this.state.form\r\n                                )}\r\n                            </div>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                rows=\"5\"\r\n                                onChange={(event) =>\r\n                                    this.inputUpdateHandler(\r\n                                        event,\r\n                                        \"description\"\r\n                                    )\r\n                                }\r\n                                className={validationClassName(\r\n                                    \"description\",\r\n                                    this.state.form\r\n                                )}\r\n                            />\r\n                            <div class=\"invalid-feedback\">\r\n                                {validationFeedback(\r\n                                    \"description\",\r\n                                    this.state.form\r\n                                )}\r\n                            </div>\r\n                        </Form.Group>\r\n\r\n                        <Achievements\r\n                            items={this.state.achievements}\r\n                            onChangeMethod={this.inputUpdateHandler}\r\n                            selectedGain={[]}\r\n                            selectedRequired={[]}\r\n                        />\r\n\r\n                        <SessionGroup\r\n                            onChangeMethod={this.inputSessionUpdateHandler}\r\n                            sessions={this.state.trip.sessions}\r\n                            forDeleteSession={this.sessionDeleteHandler}\r\n                        />\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Create;\r\n"]},"metadata":{},"sourceType":"module"}